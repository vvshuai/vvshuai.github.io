<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20210521</title>
    <url>/2021/05/21/20210521/</url>
    <content><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>继续苦逼的毕业论文……</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>记ffmpeg不同环境的问题</title>
    <url>/2021/06/03/Reflection-20210603/</url>
    <content><![CDATA[<h1 id="工作中的思考-20210603"><a href="#工作中的思考-20210603" class="headerlink" title="工作中的思考(20210603)"></a>工作中的思考(20210603)</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>遇到一个匪夷所思的问题，使用ffmpeg命令对音视频、图片等进行处理时，本地可以通过接口调用执行cmd返回一段视频，打包后发布到ECS和K8S多台机器后，在sit环境居然直接挂了。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>遂在日志中排查问题，将通过埋点获得的命令在k8s上执行，居然也成功了，从过程上看确实是由于这条命令该生成的文件没有生成，但服务器终端手动执行又执行成功，一模一样的命令通过终端执行和通过Java的exec执行会有区别吗？</p>
<p>按道理来说不会有区别，因为Java本身是一次编译到处执行，并不会受到跨平台的影响，本地也是直接路由到docker镜像上。</p>
<p>还有一种可能是线程池的问题，利用两个线程去跑两个异步任务，有没有可能这个线程被不明原因阻塞，而程序主线程继续执行，导致我们命令执行成功，但文件未写入到服务器中。</p>
<p>也有可能是waitFor方法失效，不过可能性不大。</p>
<p>相同的命令我们在几个环境测试，居然会有不同的结果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -nostdin -r 25 -y -i 1.jpg -vf &quot;zoompan=&#x27;1.25&#x27;:x=&#x27;if(lte(on,-1),(iw-</span><br><span class="line">iw/zoom)/2,x+20)&#x27;:y=&#x27;if(lte(on,1),(ih-ih/zoom)/2,y)&#x27;:d=150&quot; -c:v libx264 -t 2 -pix_fmt yuv420p 1.mp4</span><br><span class="line">ffmpeg -nostdin -r 25 -y -i 2.jpg -vf &quot;zoompan=&#x27;1.25&#x27;:x=&#x27;if(lte(on,1),(iw/zoom)/2,x-20)&#x27;:y=&#x27;if(lte(on,1),(ih-ih/zoom)/2,y)&#x27;:d=150&quot; -c:v libx264 -t 2 -pix_fmt yuv420p 2.mp4</span><br><span class="line">ffmpeg -nostdin -r 25 -y -i 3.jpg -vf &quot;zoompan=&#x27;1.5&#x27;:x=&#x27;if(lte(on,1),(iw-iw/zoom)/2,x)&#x27;:y=&#x27;if(lte(on,-1),(ih-ih/zoom)/2,y+15)&#x27;:d=150&quot; -c:v libx264 -t 2 -pix_fmt yuv420p 3.mp4</span><br><span class="line">ffmpeg -nostdin -r 25 -y -i 4.jpg -vf &quot;zoompan=&#x27;1.5&#x27;:x=&#x27;if(lte(on,1),(iw-iw/zoom)/2,x)&#x27;:y=&#x27;if(lte(on,1),(ih/zoom)/2,y-15)&#x27;:d=150&quot; -c:v libx264 -t 2 -pix_fmt yuv420p 4.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -r 25 -y -i 1.jpg -vf &quot;scale=-2:10*ih,zoompan=z=&#x27;min(zoom+0.035,2)&#x27;:d=600:x=&#x27;iw/2-(iw/zoom/2)&#x27;:y=&#x27;ih/2-(ih/zoom/2)&#x27;,scale=-2:720&quot; -c:v libx264 -t 1 -pix_fmt yuv420p 5.mp4</span><br><span class="line"></span><br><span class="line">ffmpeg -r 25 -y -i 3.jpg -vf scale=-2:10*ih,zoompan=z=&#x27;if(eq(ld(1),0),zoom+1-0.035*st(1,1),max(zoom-0.035,1))&#x27;:d=400:x=&#x27;iw/2-(iw/zoom/2)&#x27;:y=&#x27;ih/2-(ih/zoom/2)&#x27;,scale=-2:720 -c:v libx264 -t 1 -pix_fmt yuv420p 6.mp4</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>环境</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>本地ffmpeg执行</td>
<td>成功</td>
</tr>
<tr>
<td>本地Unbuntu20.04执行</td>
<td>成功</td>
</tr>
<tr>
<td>本地启动项目，通过调接口执行</td>
<td>成功</td>
</tr>
<tr>
<td>项目部署到k8s后，在服务器端centos的终端执行</td>
<td>成功</td>
</tr>
<tr>
<td>项目部署到k8s后，通过接口调用</td>
<td>失败</td>
</tr>
</tbody></table>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>今天通过增加日志的分析参数，发现在执行视频放缩时没有找到对应的过滤器，而ffmpeg中ld指令是获取我们在st中的值，查阅官方文档发现我们并没有缺少libavuitl这个库。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210604204518926.png" alt="image-20210604204518926"></p>
<p>而后我发现在执行**eq(ld(1),0)<strong>在中间多加一个空格</strong>eq(ld(1), 0)**，想到之前调试到Java的exec源码，顺便分析一下。</p>
<p>首先随便写个main函数,开始单步调试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        String cmd = <span class="string">&quot;java -version&quot;</span>;</span><br><span class="line">        Process cmdProcess = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cmdProcess = runtime.exec(cmd);</span><br><span class="line">            cmdProcess.waitFor();</span><br><span class="line">            cmdProcess.destroy();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行进来以后发现首先声明了一个StringTokenizer，然后通过空格拆分，但是考虑到本地Java执行成功，还要继续跟进源码，进入下一个exec函数。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210604210400742.png" alt="image-20210604210400742"></p>
<p>exec函数执行了start函数，可以得到如下图所示：</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210604210919304.png" alt="image-20210604210919304"></p>
<p>这段源码写的很简练，也很精髓，利用Java的万类之王Object，直接克隆对象直接修改，效率很高，接下来就是判断命令是否为空，是否存在权限，是否有不合法字符。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210604211219884.png" alt="image-20210604211219884"></p>
<p>现在还没有发现问题所在，继续向下走。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210604211419822.png" alt="image-20210604211419822"></p>
<p>最后，我注意到使用了一个枚举，源码注释是”Represents a source of subprocess input or a destination of subprocess output”，明白我们的exec函数其实是创建了一个进程(Process)，这个进程会处理我们的命令，通过返回两个数据流（正常流和ERROR流），将流进行合并返回结果，这里就不写了。</p>
<p>看样子应该是Java创建linux的进程(准确说应该是task_struct)和shell执行有一定出入，也有可能是ffmpeg的bug。</p>
<p>后来在ffmpeg社区中发现有人遇到这个问题，在linux环境下服务器端过滤器不能加引号，整条命令不能有空格，仅限打包到服务器后，其他没有任何问题。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>学习一些开源软件，可以去社区看看结果，撰写命令行不该像写程序一样加空格。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>(centos7)ffmpeg编译gl-transitions.md</title>
    <url>/2021/10/31/centos%E7%BC%96%E8%AF%91gl-transitions/</url>
    <content><![CDATA[<h1 id="ffmpeg编译gl-transitions-centos7环境为基础"><a href="#ffmpeg编译gl-transitions-centos7环境为基础" class="headerlink" title="ffmpeg编译gl-transitions(centos7环境为基础)"></a>ffmpeg编译gl-transitions(centos7环境为基础)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ffmpeg本身是一款开源的编解码软件，在4.3版本后加入xfade的转场，一次偶然逛发现了<a href="https://github.com/gl-transitions/gl-transitions">GRE大神使用WebGL编写的一些转场</a>，效果十分酷炫，以及<a href="https://github.com/transitive-bullshit/ffmpeg-gl-transition">Travis Fischer大神写的将ffmpeg和gl-transitions链接到一起的文件</a>，网上教程基本都是基于Ubuntu系统，转到centos上还是有很多的坑存在，最后查找了很多资料，踩了很多坑整理出这篇文档，有问题的可以在评论区讨论。</p>
<p>本文已在docker上实践成功，基于Linux without EGL路线。</p>
<h2 id="安装gl-transitions依赖"><a href="#安装gl-transitions依赖" class="headerlink" title="安装gl-transitions依赖"></a>安装gl-transitions依赖</h2><p>首先更新的package至软件源中的最新版，改成国内源下载快一点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<p>安装必要的package</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install autoconf automake bzip2 bzip2-devel cmake freetype-devel gcc gcc-c++ git libtool make pkgconfig zlib-devel libxml2-devel mesa* freeglut*</span><br></pre></td></tr></table></figure>

<p>可以创建一个ffmpeg_sources目录，下面所有的文件都安装在这个包下面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我这里是放在了/usr/<span class="built_in">local</span>下面</span></span><br><span class="line">mkdir /usr/local/ffmpeg_sources</span><br></pre></td></tr></table></figure>

<p>centos7的安装cmake版本基本是2.8左右的，后续依赖的glfw需要升级cmake。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除旧的cmake版本</span></span><br><span class="line">yum remove cmake -y</span><br><span class="line">wget https://cmake.org/files/v3.14/cmake-3.14.5.tar.gz</span><br><span class="line">tar zxvf cmake-3.14.5.tar.gz</span><br><span class="line">cd cmake-3.14.5</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>然后安装OpenGL相关库(glew)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install glew glew-devel</span><br></pre></td></tr></table></figure>

<p>安装glfw3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line">wget https://codeload.github.com/glfw/glfw/tar.gz/refs/tags/3.3.4</span><br><span class="line">tar -xzvf glfw-3.3.4.tar.gz</span><br><span class="line">cd glfw-3.3.4</span><br><span class="line">yum -y install libXrandr*</span><br><span class="line">yum -y install libXcursor*</span><br><span class="line">yum -y install libXi*</span><br><span class="line">cmake .</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装Xvfb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install Xvfb</span><br></pre></td></tr></table></figure>

<h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>一般下载的ffmpeg都是官网编译好的，这次要下载源码自行编译</p>
<p>全版本地址：<a href="https://ffmpeg.org/releases/">https://ffmpeg.org/releases/</a></p>
<p>选择合适的版本，本文选择的是linux下4.4版本(<a href="https://ffmpeg.org/releases/ffmpeg-4.4.tar.gz)%E3%80%82">https://ffmpeg.org/releases/ffmpeg-4.4.tar.gz)。</a></p>
<p>在下载之前，我们先下好ffmepg的依赖。首先安装所需的汇编依赖。</p>
<p>安装nasm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line">curl -O -L https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2</span><br><span class="line">tar xjvf nasm-2.15.05.tar.bz2</span><br><span class="line">cd nasm-2.15.05</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装yasm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line">curl -O -L https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz</span><br><span class="line">tar xzvf yasm-1.3.0.tar.gz</span><br><span class="line">cd yasm-1.3.0</span><br><span class="line">./configure --prefix=&quot;$HOME/ffmpeg_build&quot; --bindir=&quot;$HOME/bin&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装libx264</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line"><span class="meta">#</span><span class="bash">下载不下来可以把https改为git</span></span><br><span class="line">git clone --branch stable --depth 1 https://code.videolan.org/videolan/x264.git</span><br><span class="line">cd x264</span><br><span class="line">./configure --enable-static</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>下载ffmpeg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line">wget https://ffmpeg.org/releases/ffmpeg-4.4.tar.gz</span><br><span class="line">tar -xzvf ffmpeg-4.4.tar.gz</span><br></pre></td></tr></table></figure>

<p>下载ffmpeg-gl-transition</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources</span><br><span class="line">git clone https://github.com/transitive-bullshit/ffmpeg-gl-transition.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意<span class="built_in">clone</span>后进入ffmpeg4.4目录下</span></span><br><span class="line">cd ffmpeg-4.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝vf_gltransition.c到libavfilter</span></span><br><span class="line">cp /usr/local/ffmpeg_sources/ffmpeg-gl-transition/vf_gltransition.c libavfilter/</span><br></pre></td></tr></table></figure>

<p>拷贝之后，ffmpeg-gl-transition还有个diff文件，其实就是在ffmpeg/libavfilter里加入要编译vf_gltransition.c这个文件。</p>
<p>所以我们进入libavfilter文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在libavfilter/Makefile里加入</span></span><br><span class="line"><span class="meta">OBJS-$</span><span class="bash">(CONFIG_GLTRANSITION_FILTER)           += vf_gltransition.o</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在libavfilter/allfilters.c加入</span></span><br><span class="line">extern AVFilter ff_vf_gltransition;</span><br></pre></td></tr></table></figure>

<p>而后我们还需要修改我们刚刚复制进来的vf_gltransition.c，去掉宏定义，这里直接引用原作者的话</p>
<blockquote>
<h4 id="Linux-without-EGL"><a href="#Linux-without-EGL" class="headerlink" title="Linux without EGL"></a>Linux without EGL</h4><p>If you don’t want to use EGL, just comment out this line in <code>vf_gltransition.c</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef __APPLE__</span><br><span class="line"># define GL_TRANSITION_USING_EGL // remove this line if you don&#x27;t want to use EGL</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
</blockquote>
<p>在修改完成后，开始编译ffmpeg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ffmpeg_sources/ffmpeg-4.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定pkgconfig 避免找不到</span></span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行configure</span></span><br><span class="line">./configure --enable-nonfree --enable-cross-compile --enable-gpl --enable-libx264 --enable-opengl --enable-filter=gltransition --extra-libs=&#x27;-lGLEW -lglfw3 -ldl -lX11&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行make</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立软连接</span></span><br><span class="line">ln ffmpeg /usr/bin/ffmpeg &amp;&amp; ln ffprobe /usr/bin/ffprobe</span><br></pre></td></tr></table></figure>

<p>完成后，需要启动Xvfb，直接守护进程启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup Xvfb :1 -screen 0 1280x1024x16 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">export DISPLAY=:1</span><br></pre></td></tr></table></figure>

<p>最后可以执行命令测试下了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 转场文件在https://github.com/gl-transitions/gl-transitions</span></span><br><span class="line">ffmpeg -i media/0.mp4 -i media/1.mp4 -filter_complex &quot;gltransition=duration=4:offset=1.5:source=crosswarp.glsl&quot; -y out.mp4</span><br></pre></td></tr></table></figure>

<p>本文仅提供参考，如有问题可留言，或在本文出现的所有链接中寻找答案，还有百度或谷歌。</p>
<p>推荐<a href="https://blog.csdn.net/Asa_Ho">Asa_Ho</a>博主写了很多魔改，地址<a href="https://blog.csdn.net/Asa_Ho/article/details/116096500">ffmpeg 再编译使用 ffmpeg-gl-transition</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://trac.ffmpeg.org/wiki/CompilationGuide/Centos">https://trac.ffmpeg.org/wiki/CompilationGuide/Centos</a></p>
<p><a href="https://github.com/transitive-bullshit/ffmpeg-gl-transition">https://github.com/transitive-bullshit/ffmpeg-gl-transition</a></p>
<p><a href="https://blog.csdn.net/Asa_Ho/article/details/116096500">ffmpeg 再编译使用 ffmpeg-gl-transition</a></p>
<p><a href="https://github.com/gl-transitions/gl-transitions">https://github.com/gl-transitions/gl-transitions</a></p>
]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/20/text/</url>
    <content><![CDATA[<h1 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h1><h2 id="BootStrap学习"><a href="#BootStrap学习" class="headerlink" title="BootStrap学习"></a>BootStrap学习</h2><h3 id="BootStarp-Table"><a href="#BootStarp-Table" class="headerlink" title="BootStarp-Table"></a>BootStarp-Table</h3><h4 id="1-bootstrap-table设置某列序号自增"><a href="#1-bootstrap-table设置某列序号自增" class="headerlink" title="1.bootstrap-table设置某列序号自增"></a>1.bootstrap-table设置某列序号自增</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">col = [&#123;</span><br><span class="line">    <span class="attr">field</span>: <span class="string">&#x27;SerialNumber&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>,</span><br><span class="line">    <span class="attr">formatter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value, row, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发保证数据安全</title>
    <url>/2021/08/02/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="高并发下数据一致性问题"><a href="#高并发下数据一致性问题" class="headerlink" title="高并发下数据一致性问题"></a>高并发下数据一致性问题</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>首先写一段Java代码，我们通过线程池开六个线程，跑十个任务，每次取哈希表里的值并加1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">6</span>);</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> currentNumber = map.get(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentNumber);</span><br><span class="line">                    currentNumber++;</span><br><span class="line">                    map.put(<span class="number">1</span>, currentNumber);</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            service.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;等待子线程执行完毕……&quot;</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果是显而易见的，肯定会有很多脏数据存在，最后的值不出意外不会为10。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210802232141684.png" alt="image-20210802232141684"></p>
<p>就是因为每个线程都有自己的私有数据，所以才会产生脏数据，所以用加锁使其串行化，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">6</span>);</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> currentNumber = map.get(<span class="number">1</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + currentNumber);</span><br><span class="line">                        currentNumber++;</span><br><span class="line">                        map.put(<span class="number">1</span>, currentNumber);</span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            service.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;等待子线程执行完毕……&quot;</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕,最终结果:&quot;</span>+map.get(<span class="number">1</span>));</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这样结果就可以并行显示了。</p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20210802235935343.png" alt="image-20210802235935343"></p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>首先可知线程还有几种状态，我们刚刚加锁便是使它阻塞，所以是同步阻塞状态，不会产生脏数据，但是性能会下降很多，随便一个流量洪峰可能就down了，然后被辞退。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>所以我们要改写同步阻塞状态，首先升级变为<strong>同步非阻塞状态</strong>，在线上环境中肯定是多台服务器分布式搭建的，有自己的jetty集群，有我们依赖的其他服务集群，还有我们中间件集群，随之而来的就是各种rpc调用。这么多集群，每台机器都是独立的，如果采取刚刚的同步阻塞状态，那就是集体被沉默了。</p>
<p>所以我们挑一个leader，让他拿一把锁，其他人拿不到就不等了下次再来碰碰运气，这就是分布式锁。</p>
<p>以redis为例，一个KV数据库，就用最简单的K-V模型，谁第一个把key写进数据库中，谁就拿到了这把锁，用完了我再把锁删了，留给下个人用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> setnx lock:code <span class="literal">true</span></span></span><br><span class="line">OK</span><br><span class="line">we can do something in Java </span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> del lock:code</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>但是如果我们在拿到锁时候，程序出现<strong>例如NullException</strong>导致中断，就会导致锁无法释放，所以我们要将锁设置一个过期时间，防止没有删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; setnx lock:code true</span><br><span class="line">OK</span><br><span class="line">&gt; expire lock:code 2 (注：时间为秒)</span><br><span class="line">we can do something in Java </span><br><span class="line">&gt; del lock:code</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>但是我们发现setnx指令和expire指令是两段指令分别执行，并不是原子化处理，拿到锁之后且第二条指令未执行的情况下又会返回第一种情况，后来redis开源作者写了个新指令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> lock:code <span class="literal">true</span> ex 3 nx</span> </span><br><span class="line">OK</span><br><span class="line">we can do something in Java</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> del lock:code</span></span><br></pre></td></tr></table></figure>

<p>尽管实现了原子化，但是分布式锁还是有很多问题，比如临界区代码未执行完，锁被释放；保证锁的可重入性等等，反正不管怎么样算是实现了我们的同步非阻塞。</p>
<h2 id="解决方案的解决方案"><a href="#解决方案的解决方案" class="headerlink" title="解决方案的解决方案"></a>解决方案的解决方案</h2><p>虽然锁的问题解决了。</p>
<p>在非阻塞的情况下，有十个任务进来，相当于十个线程，但是只有一个线程获得了分布式锁，其他九个线程没有拿到，就要用循环轮询，但是抢占式的线程，会出现有些线程一直被插队，导致饿死。</p>
<p>所以引入异步解决方案。</p>
<p>本地可以引入RocketMQ，作为异步消息队列，使用maven引入到工程内部。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置好对应的ip、端口以及topic name，实现自己的Producer和Consumer，下面简单实现一个例子。</p>
<p>初始化对应的nameAdder和topicName，利用消息队列中的生产者消费者实现逻辑即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 生产者</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqProducer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultMQProducer producer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过注解注入yml中的信息</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mq.nameserver.addr&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nameAddr;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mq.topicname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">&quot;vvs_group&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(nameAddr);</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">asyncDoSomething</span> <span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(topicName, <span class="string">&quot;doSomething&quot;</span>, mapper.writeValueAsString(params));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            producer.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 消费者</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> Class MqConsumer &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultMQPushConsumer consumer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mq.nameserver.addr&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nameAddr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mq.topicname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        comsumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">&quot;vvs_consumer_group&quot;</span>);</span><br><span class="line"> 		<span class="comment">// 订阅所有的消息</span></span><br><span class="line">        consumer.setNamesrvAddr(nameAddr);</span><br><span class="line">        consumer.subscribe(topicName, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 注册一个消息监听器</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                  * 做当前的业务逻辑</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动consumer</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在consumer启动后发现，DefaultMQPushConsumer并没有继承一些线程相关的类，那他是如何通过守护线程的形式来监听到消息的呢？</p>
<p>经过一通翻阅源码找到</p>
<ul>
<li>首先是进入到DefaultMQPushConsumerImpl中，判断当前的服务状态，如果状态为CREATE_JUST且注册成功，则调用MQClientFactory.start();</li>
<li>第二步是使用synchronized加锁，保证clientFactoy只调用一次，通过NettyRemotingClient通知NettyRemotingServer。</li>
<li>而在NettyRemotingServer构造函数中中new了一个Timer守护线程。</li>
</ul>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20211206000841818.png" alt="image-20211206000841818"></p>
<p><img src="https://blog-vs-oss.oss-cn-beijing.aliyuncs.com/img/image-20211206000858142.png" alt="image-20211206000858142"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多线程其实在IO密集的场景下使用更好，但要注意脏数据问题，在性能和稳定上做好权衡，同时在一些流量大的接口，可以改为异步非阻塞。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/72fda925114f">RocketMQ remoting模块分析</a></p>
<p><a href="https://www.cnblogs.com/xiaoshen666/p/10867599.html">RocketMQ整体架构</a></p>
<p>《Redis深度历险》</p>
]]></content>
      <tags>
        <tag>线程安全</tag>
      </tags>
  </entry>
</search>
